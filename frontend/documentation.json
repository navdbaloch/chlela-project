{
    "pipes": [],
    "interfaces": [
        {
            "name": "ActionButtonOptions",
            "id": "interface-ActionButtonOptions-5b50020ed3ca9670f3a3e10a7f4abdae",
            "file": "src/app/action-button/action-button.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\nexport enum Icons {\n  ROTATE_RIGHT = 'rotate-right',\n  ROTATE_LEFT = 'rotate-left',\n  UPLOAD = 'upload',\n  RESIZE = 'resize',\n  CLEAR = 'clear'\n}\n\nexport enum ActionType {\n  ROTATE_LEFT,\n  ROTATE_RIGHT,\n  UPLOAD,\n  RESIZE,\n  CLEAR\n}\n\nexport interface ActionButtonOptions {\n  icon: Icons,\n  label: string\n  actionType: ActionType,\n  color: 'primary' | 'default'\n}\n\n@Component({\n  selector: 'app-action-button',\n  templateUrl: './action-button.component.html',\n  styleUrls: ['./action-button.component.scss']\n})\nexport class ActionButtonComponent {\n  @Input() options: Partial<ActionButtonOptions> = { color: 'default' };\n  showLabel = false;\n\n  @Output() onClick = new EventEmitter();\n\n  @HostListener(\"mouseenter\")\n  onMouseEnter() {\n    this.showLabel = true;\n  }\n\n  @HostListener(\"mouseleave\")\n  onMouseLeave() {\n    this.showLabel = false;\n  }\n}\n",
            "properties": [
                {
                    "name": "actionType",
                    "type": "ActionType",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "color",
                    "type": "\"primary\" | \"default\"",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "icon",
                    "type": "Icons",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ActionButtonComponent",
            "id": "component-ActionButtonComponent-5b50020ed3ca9670f3a3e10a7f4abdae",
            "file": "src/app/action-button/action-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action-button",
            "styleUrls": [
                "./action-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "defaultValue": "{ color: 'default' }",
                    "line": 32,
                    "type": "Partial<ActionButtonOptions>"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "showLabel",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "line": 38
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "line": 43
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\nexport enum Icons {\n  ROTATE_RIGHT = 'rotate-right',\n  ROTATE_LEFT = 'rotate-left',\n  UPLOAD = 'upload',\n  RESIZE = 'resize',\n  CLEAR = 'clear'\n}\n\nexport enum ActionType {\n  ROTATE_LEFT,\n  ROTATE_RIGHT,\n  UPLOAD,\n  RESIZE,\n  CLEAR\n}\n\nexport interface ActionButtonOptions {\n  icon: Icons,\n  label: string\n  actionType: ActionType,\n  color: 'primary' | 'default'\n}\n\n@Component({\n  selector: 'app-action-button',\n  templateUrl: './action-button.component.html',\n  styleUrls: ['./action-button.component.scss']\n})\nexport class ActionButtonComponent {\n  @Input() options: Partial<ActionButtonOptions> = { color: 'default' };\n  showLabel = false;\n\n  @Output() onClick = new EventEmitter();\n\n  @HostListener(\"mouseenter\")\n  onMouseEnter() {\n    this.showLabel = true;\n  }\n\n  @HostListener(\"mouseleave\")\n  onMouseLeave() {\n    this.showLabel = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  border-radius: 12px;\n  padding: 20px;\n  background-color: white;\n  color: black;\n  text-align: center;\n  -webkit-transition-duration: 0.4s;\n  transition-duration: 0.4s;\n  margin: 16px 16px !important;\n  text-decoration: none;\n  font-size: 16px;\n  cursor: pointer;\n  border: none;\n}\n\nbutton.primary {\n  background-color: #1ea7fd;\n}\n\nbutton > img {\n  width: 20px;\n}\n\n.wrapper {\n  position: relative;\n  display: inline-block;\n  opacity: 1;\n}\n\nspan.label {\n  position: absolute;\n  left: 0px;\n  font-size: 14px;\n  top: -9px;\n  background-color: black;\n  color: white;\n  padding: 2px;\n  border-radius: 2px;\n  width: fit-content;\n  display: inline-block;\n}\n",
                    "styleUrl": "./action-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"wrapper\">\n    <button (click)=\"onClick.emit()\" class='{{options.color}}'>\n        <img src=\"/assets/action-button-icons/{{options.icon}}.svg\">\n        <span *ngIf=\"showLabel && options.label\" class=\"label\">{{ options.label }}</span>\n    </button>\n</div>"
        },
        {
            "name": "ActionPaneComponent",
            "id": "component-ActionPaneComponent-7efdd65c01458607443a75c44aae0be5",
            "file": "src/app/action-pane/action-pane.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action-pane",
            "styleUrls": [
                "./action-pane.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-pane.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onActionPerformed",
                    "defaultValue": "new EventEmitter<ActionType>()",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actionButtons",
                    "defaultValue": "[\n    {\n      icon: Icons.ROTATE_LEFT,\n      actionType: ActionType.ROTATE_LEFT,\n      label: 'Rotate Left',\n      color: 'default'\n    }, {\n      icon: Icons.ROTATE_RIGHT,\n      actionType: ActionType.ROTATE_RIGHT,\n      label: 'Rotate Right',\n      color: 'default'\n    }, {\n      icon: Icons.UPLOAD,\n      actionType: ActionType.UPLOAD,\n      label: 'Publish',\n      color: 'primary'\n    }, {\n      icon: Icons.RESIZE,\n      actionType: ActionType.RESIZE,\n      label: 'Resize',\n      color: 'default'\n    }, {\n      icon: Icons.CLEAR,\n      actionType: ActionType.CLEAR,\n      label: 'Clear',\n      color: 'default'\n    }\n  ]",
                    "type": "ActionButtonOptions[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Icons, ActionButtonOptions, ActionType } from '../action-button/action-button.component';\n\n@Component({\n  selector: 'app-action-pane',\n  templateUrl: './action-pane.component.html',\n  styleUrls: ['./action-pane.component.scss']\n})\nexport class ActionPaneComponent {\n  @Output() onActionPerformed = new EventEmitter<ActionType>();\n\n  actionButtons: ActionButtonOptions[] = [\n    {\n      icon: Icons.ROTATE_LEFT,\n      actionType: ActionType.ROTATE_LEFT,\n      label: 'Rotate Left',\n      color: 'default'\n    }, {\n      icon: Icons.ROTATE_RIGHT,\n      actionType: ActionType.ROTATE_RIGHT,\n      label: 'Rotate Right',\n      color: 'default'\n    }, {\n      icon: Icons.UPLOAD,\n      actionType: ActionType.UPLOAD,\n      label: 'Publish',\n      color: 'primary'\n    }, {\n      icon: Icons.RESIZE,\n      actionType: ActionType.RESIZE,\n      label: 'Resize',\n      color: 'default'\n    }, {\n      icon: Icons.CLEAR,\n      actionType: ActionType.CLEAR,\n      label: 'Clear',\n      color: 'default'\n    }\n  ];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper { \n    display: flex;\n    background-color: gainsboro;\n    width: fit-content;\n    border-radius: 5px 5px 0px 0px;\n}",
                    "styleUrl": "./action-pane.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"wrapper\">\n  <ng-container *ngFor=\"let actionBtn of actionButtons\">\n    <app-action-button\n      (click)=\"onActionPerformed.emit(actionBtn.actionType)\"\n      [options]=\"actionBtn\"\n    ></app-action-button>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3dfafc2ab48360618cc1e75c97e3042d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'frontend'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-image-pane #imagePane class=\"canvas image-pane\"></app-image-pane>\n<app-action-pane\n  (onActionPerformed)=\"imagePane.performAction($event)\"\n  class=\"action-pane\"\n></app-action-pane>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ImagePaneComponent",
            "id": "component-ImagePaneComponent-8b3d00ee532c3d12e076511123e608c3",
            "file": "src/app/image-pane/image-pane.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-pane",
            "styleUrls": [
                "./image-pane.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-pane.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canvasContainerRef",
                    "defaultValue": "null",
                    "type": "ElementRef<HTMLDivElement> | null",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'canvasContainer'"
                        }
                    ],
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "canvasRef",
                    "defaultValue": "null",
                    "type": "ElementRef<HTMLCanvasElement> | null",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'canvas'"
                        }
                    ],
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "context2D",
                    "type": "CanvasRenderingContext2D",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "image",
                    "type": "HTMLImageElement",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "imgAngleInDegrees",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "imgHeight",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "imgPosX",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "imgPosY",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "imgWidth",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearCanvas",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "clearImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "createImageEl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "drawImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "handleFileInput",
                    "args": [
                        {
                            "name": "files",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadImageFile",
                    "args": [
                        {
                            "name": "files",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveImage",
                    "args": [
                        {
                            "name": "axis",
                            "type": "\"x\" | \"y\""
                        },
                        {
                            "name": "number",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "jsdoctags": [
                        {
                            "name": "axis",
                            "type": "\"x\" | \"y\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "number",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "onDragOver",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileDrop",
                    "args": [
                        {
                            "name": "evt",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "performAction",
                    "args": [
                        {
                            "name": "actionType",
                            "type": "ActionType"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "jsdoctags": [
                        {
                            "name": "actionType",
                            "type": "ActionType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resizeCanvas",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "resizeImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "rotateImg",
                    "args": [
                        {
                            "name": "degrees",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "degrees",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keypress",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 166
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, HostListener, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent, Observable } from 'rxjs';\nimport { ActionType } from '../action-button/action-button.component';\n\nconst ARROW_KEY_NAMES = [\n  'w', 's', 'a', 'd'\n];\n\n@Component({\n  selector: 'app-image-pane',\n  templateUrl: './image-pane.component.html',\n  styleUrls: ['./image-pane.component.scss']\n})\nexport class ImagePaneComponent implements AfterViewInit {\n  @ViewChild('canvas')\n  private canvasRef: ElementRef<HTMLCanvasElement> | null = null;\n  @ViewChild('canvasContainer')\n  private canvasContainerRef: ElementRef<HTMLDivElement> | null = null;\n  private image: HTMLImageElement;\n  private context2D: CanvasRenderingContext2D;\n  private imgAngleInDegrees = 0;\n  private imgPosX = 0; private imgPosY = 0;\n  private imgWidth = 0; private imgHeight = 0;\n\n  private get canvas(): HTMLCanvasElement {\n    return this.canvasRef?.nativeElement;\n  }\n\n  private get canvasContainer(): HTMLDivElement {\n    return this.canvasContainerRef?.nativeElement;\n  }\n\n  get isImageSelected(): boolean {\n    return this.image.src ? true : false;\n  }\n\n  constructor() {\n    this.createImageEl();\n  }\n\n  private createImageEl() {\n    this.image = document.createElement(\"img\");\n\n    this.image.onload = () => {\n      this.imgWidth = this.image.width;\n      this.imgHeight = this.image.height;\n      this.resizeCanvas();\n      this.drawImage();\n    };\n\n  }\n\n  private clearCanvas() {\n    console.log('clearCanvas');\n    this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private clearImage() {\n    this.clearCanvas();\n    this.createImageEl();\n    this.imgPosY = 0; this.imgPosX = 0;\n  }\n\n  private rotateImg(degrees: number) {\n    this.clearCanvas();\n\n    this.context2D.save();\n    this.context2D.translate(this.imgWidth / 2, this.imgHeight / 2);\n    this.context2D.rotate(degrees * Math.PI / 180);\n    this.context2D.drawImage(this.image, -this.imgWidth / 2, -this.imgHeight / 2);\n    this.context2D.restore();\n  }\n\n  private loadImageFile(files: any[]) {\n    if (files.length > 1) {\n      alert(\"Please choose only one file\");\n      return;\n    }\n\n    const file = files[0];\n    if ((/\\.(jpe?g|png)$/i).test(file.name) === false) {\n      alert(\"Please choose a valid image file, allowed types are jpg,jpeg and png\");\n      return;\n    }\n\n    const FR = new FileReader();\n    FR.addEventListener(\"load\", (evt) => {\n      this.image.src = evt.target.result.toString();\n    });\n    FR.readAsDataURL(file);\n  }\n\n  private resizeImage() {\n    this.imgWidth = this.imgWidth * 0.5;\n    this.imgHeight = this.imgWidth * 0.5;\n    this.resizeCanvas();\n    this.drawImage();\n  }\n\n  private drawImage() {\n    this.clearCanvas();\n    this.context2D.drawImage(this.image, this.imgPosX, this.imgPosY, this.imgWidth, this.imgHeight);\n  }\n\n  private resizeCanvas() {\n    this.canvas.width = this.imgWidth < this.canvasContainer.clientWidth ? this.canvasContainer.clientWidth : this.imgWidth;\n    this.canvas.height = this.imgHeight < this.canvasContainer.clientHeight ? this.canvasContainer.clientHeight : this.imgHeight;\n\n  }\n\n  ngAfterViewInit(): void {\n    this.context2D = this.canvas.getContext(\"2d\");\n  }\n\n  performAction(actionType: ActionType) {\n    switch (actionType) {\n      case ActionType.ROTATE_LEFT:\n        this.imgAngleInDegrees -= 90;\n        this.rotateImg(this.imgAngleInDegrees);\n        break;\n      case ActionType.ROTATE_RIGHT:\n        this.imgAngleInDegrees += 90;\n        this.rotateImg(this.imgAngleInDegrees);\n        break;\n      case ActionType.CLEAR:\n        if (confirm(\"Are you sure? you want to clear image?\")) {\n          this.clearImage();\n        }\n        break;\n      case ActionType.RESIZE:\n        this.resizeImage();\n        break;\n    }\n  }\n\n  onFileDrop(evt: { preventDefault: () => void; }) {\n    evt.preventDefault();\n  }\n\n  onDrop(event: { preventDefault: () => void; dataTransfer: any }) {\n    event.preventDefault();\n    const files = event.dataTransfer.files;\n    this.loadImageFile(files);\n  }\n\n  onDragOver(event: { stopPropagation: () => void; preventDefault: () => void; }) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  handleFileInput(files: any[]) {\n    this.loadImageFile(files);\n  }\n\n  moveImage(axis: 'x' | 'y', number: number) {\n    if (axis === 'x') {\n      this.imgPosX += number;\n    } else {\n      this.imgPosY += number;\n    }\n\n    this.drawImage();\n  }\n\n  @HostListener('document:keypress', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    event.preventDefault();\n    switch (event.key) {\n      case 'w':\n        this.moveImage('y', -10);\n        break;\n      case 's':\n        this.moveImage('y', 10);\n        break;\n      case 'a':\n        this.moveImage('x', -10);\n        break;\n      case 'd':\n        this.moveImage('x', 10);\n        break;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper,\n#image-upload-msg {\n  width: 100%;\n  height: 100%;\n}\n\n#image-upload-msg {\n  // text-align: center;\n  font-size: 24px;\n  color: gainsboro;\n}\n#image-upload-msg > p {\n  text-align: center;\n}\n\n.wrapper {\n  overflow: auto;\n}\n\n#file-selector {\n  width: 100%;\n  top: 0;\n  position: absolute;\n  height: 100%;\n  left: 0;\n  opacity: 0;\n}\n\n.arrow-key-btn {\n  margin: 2px;\n  color: #908a8a;\n  border: none;\n  font-size: 25px;\n  padding: 3px;\n  min-width: 37px;\n}\n\n#move-keys-container {\n  position: absolute;\n  top: 0;\n  right: 0;\n}\n",
                    "styleUrl": "./image-pane.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 35
            },
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "canvas": {
                    "name": "canvas",
                    "getSignature": {
                        "name": "canvas",
                        "type": "",
                        "returnType": "HTMLCanvasElement",
                        "line": 25
                    }
                },
                "canvasContainer": {
                    "name": "canvasContainer",
                    "getSignature": {
                        "name": "canvasContainer",
                        "type": "",
                        "returnType": "HTMLDivElement",
                        "line": 29
                    }
                },
                "isImageSelected": {
                    "name": "isImageSelected",
                    "getSignature": {
                        "name": "isImageSelected",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 33
                    }
                }
            },
            "templateData": "<div\n  #canvasContainer\n  class=\"wrapper\"\n  (drop)=\"onDrop($event)\"\n  (dragover)=\"onDragOver($event)\"\n>\n  <div *ngIf=\"isImageSelected === false\" id=\"image-upload-msg\">\n    <p>\n      Drag & Drop Or Click here to Load Image\n    </p>\n    <input\n      (change)=\"handleFileInput($event.target.files)\"\n      type=\"file\"\n      id=\"file-selector\"\n    />\n  </div>\n\n  <canvas #canvas id=\"main-canvas\"> </canvas>\n\n  <div *ngIf=\"isImageSelected\" id=\"move-keys-container\">\n    <div style=\"text-align: center;\">\n      <button\n        class=\"arrow-key-btn\"\n        title=\"use w\"\n        style=\"align-self: top;\"\n        (click)=\"moveImage('y', -10)\"\n      >\n        &uarr;\n      </button>\n    </div>\n    <div>\n      <button class=\"arrow-key-btn\" title=\"use a\" (click)=\"moveImage('x', -10)\">&larr;</button>\n      <button class=\"arrow-key-btn\" title=\"use s\" (click)=\"moveImage('y', 10)\">&darr;</button>\n      <button class=\"arrow-key-btn\" title=\"use d\" (click)=\"moveImage('x', 10)\">&rarr;</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionButtonComponent"
                        },
                        {
                            "name": "ActionPaneComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ImagePaneComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ARROW_KEY_NAMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/image-pane/image-pane.component.ts",
                "type": "[]",
                "defaultValue": "[\n  'w', 's', 'a', 'd'\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/action-button/action-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/action-button/action-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/action-button/action-button.stories.ts",
                "type": "Story<ActionButtonComponent>",
                "defaultValue": "(args: ActionButtonComponent) => ({\n  component: ActionButtonComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ActionType",
                "childs": [
                    {
                        "name": "ROTATE_LEFT"
                    },
                    {
                        "name": "ROTATE_RIGHT"
                    },
                    {
                        "name": "UPLOAD"
                    },
                    {
                        "name": "RESIZE"
                    },
                    {
                        "name": "CLEAR"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/action-button/action-button.component.ts"
            },
            {
                "name": "Icons",
                "childs": [
                    {
                        "name": "ROTATE_RIGHT",
                        "value": "rotate-right"
                    },
                    {
                        "name": "ROTATE_LEFT",
                        "value": "rotate-left"
                    },
                    {
                        "name": "UPLOAD",
                        "value": "upload"
                    },
                    {
                        "name": "RESIZE",
                        "value": "resize"
                    },
                    {
                        "name": "CLEAR",
                        "value": "clear"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/action-button/action-button.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/image-pane/image-pane.component.ts": [
                {
                    "name": "ARROW_KEY_NAMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/image-pane/image-pane.component.ts",
                    "type": "[]",
                    "defaultValue": "[\n  'w', 's', 'a', 'd'\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/action-button/action-button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/action-button/action-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/action-button/action-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/action-button/action-button.stories.ts",
                    "type": "Story<ActionButtonComponent>",
                    "defaultValue": "(args: ActionButtonComponent) => ({\n  component: ActionButtonComponent,\n  props: args,\n})"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/action-button/action-button.component.ts": [
                {
                    "name": "ActionType",
                    "childs": [
                        {
                            "name": "ROTATE_LEFT"
                        },
                        {
                            "name": "ROTATE_RIGHT"
                        },
                        {
                            "name": "UPLOAD"
                        },
                        {
                            "name": "RESIZE"
                        },
                        {
                            "name": "CLEAR"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/action-button/action-button.component.ts"
                },
                {
                    "name": "Icons",
                    "childs": [
                        {
                            "name": "ROTATE_RIGHT",
                            "value": "rotate-right"
                        },
                        {
                            "name": "ROTATE_LEFT",
                            "value": "rotate-left"
                        },
                        {
                            "name": "UPLOAD",
                            "value": "upload"
                        },
                        {
                            "name": "RESIZE",
                            "value": "resize"
                        },
                        {
                            "name": "CLEAR",
                            "value": "clear"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/action-button/action-button.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/action-button/action-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/action-button/action-button.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionButtonOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/action-button/action-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/action-button/action-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/action-button/action-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/action-pane/action-pane.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionPaneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/image-pane/image-pane.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImagePaneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/image-pane/image-pane.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ARROW_KEY_NAMES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}